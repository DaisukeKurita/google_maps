<%= form_with(model: @diary, local: true, url: choose_new_or_edit) do |form| %>
  <% if @diary.errors.any? %>
    <div>
      <%= @diary.errors.count %>のエラーが発生<br>
      <% @diary.errors.full_messages.each do |msg| %>
        <%= msg %><br>
      <% end %>
    </div>
  <% end %>

  <div>
    <%= form.label :title %>
    <%= form.text_field :title %>
  </div>

  <div>
    <%= form.label :content %>
    <%= form.text_area :content %>
  </div>

  <%# script内の『hidden_address.setAttribute("value", inputAddress)』を
  介して、【住所入力用のテキストボックス】の値を受け取る %>
  <%= form.hidden_field :address, id: "hidden_address" %>

  <div>
    イベント先
    <%# 住所入力用のテキストボックスを作成 %>
    <input id="address" type="textbox" value="">
    <%# 地図検索ボタンを作成 %>
    <input type="button" value="地図検索" onclick="codeAddress()">
  </div>

  <%# 地図検索ボタンを押すと、ここに【経度・緯度】が表示される %>
  <div id="display"></div>

  <%# 地図が表示される %>
  <div id='map' style='height: 600px; width: 600px;' ></div>

  <script>
    const display = document.getElementById('display')
    let map
    let marker

    // 地図の初期設定
    function initMap() {
      // 地図の作成
      map = new google.maps.Map(document.getElementById('map'), {
        center: {
          lat: 35.65858645,
          lng: 139.74544005796224
        },
        zoom: 9,
      });

      // 緯度・経度が存在する場合はif文の中身を実行
      // 緯度・経度が存在する状況は【日記新規作成確認画面から『戻る』場合】と【『日記編集』をする場合】がある
      // gonを使用してcontrollerから緯度・経度を取得
      if (!!gon.lat_lng) {
        const lat_lng = {lat: gon.lat_lng[0], lng: gon.lat_lng[1]};
         // 指定された座標でマップを中央に表示
        map.setCenter(lat_lng);
        // 指定された座標でマーカーを立てる
        marker = new google.maps.Marker({
          map: map,
          position: lat_lng
        });
      }
    }
    
    // 地図検索ボタンを押すと実行される関数
    function codeAddress() {
      // 【住所入力用のテキストボックス】の値を取得
      const inputAddress = document.getElementById('address').value;

      const geocoder = new google.maps.Geocoder()
      geocoder.geocode({
        'address': inputAddress
      // resultsに『ジオコーディングの結果』、statusに『ステータスコード』を渡す
      }, function (results, status) {
        // statusが『OK』の場合は...
        if (status == 'OK') {
          // 指定された座標でマップを中央に表示
          map.setCenter(results[0].geometry.location); 
          // 『既にmarkerに値がある』場合は...
          if (typeof marker != 'undefined') {
            // markerをnullにする（前のマーカーが削除される）
            marker.setMap(null);
          }
          // 指定された座標でマーカーを立てる
          marker = new google.maps.Marker({
          map: map,
          position: results[0].geometry.location
        });
        // 『hidden_address』に【住所入力用のテキストボックス】の値を送る
        const hidden_address = document.getElementById('hidden_address');
        hidden_address.setAttribute("value", inputAddress);

        // 検索結果が存在する場合は『display』に緯度・経度を表示させる
        display.textContent = "<%= '検索結果' %>" + results[0].geometry.location
        } else {
          // 検索結果が無い場合はその旨を表示させる 
          alert("<%= '検索結果がありません' %>" + status);
        }
      });
    }
  </script>

  <%# APIキーの読み込み %>
  <%# callback=initMap … APIが読み込まれたらinitMap()という関数を実行 %>
  <%# async … async属性は、外部のスクリプト・ファイルのスクリプトが使用可能になったら実行する属性 %>
  <%# defer … defer属性は、ページ読み込み時に、外部のスクリプト・ファイルのスクリプトを実行する属性 %>
  <%# 『async属性』と『defer属性』を両方指定した場合、 『async属性』に対応しているブラウザは『async属性』に従う。
  『async属性』に対応していないブラウザは『defer属性』に従う %>
  <script src="https://maps.googleapis.com/maps/api/js?key=<%= ENV['GOOGLE_MAP_KEY'] %>&callback=initMap" async defer></script>

  <%= form.submit %>
<% end %>